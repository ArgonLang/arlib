/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
*/

import "runtime"
import "socket"

from "ssl/_ssl" import *

pub let DEFAULT_CONTEXT = SSLContext(PROTO_TLS)

if runtime.os == "windows" {
    pub struct X509v3Purpose {
        # Extended Key Usage objects
        let SERVER_AUTH = "1.3.6.1.5.5.7.3.1"
        let CLIENT_AUTH = "1.3.6.1.5.5.7.3.2"
    }

    pub let WINDOWS_CERT_STORES = ["CA", "ROOT"]

    pub func load_windows_certs(context) {
        var bundle = Bytes()

        for var store of WINDOWS_CERT_STORES {
            for var cert, encoding, trust of enumcerts(store) {
                if encoding == "x509_asn" && trust || trust.contains(X509v3Purpose.SERVER_AUTH) {
                    bundle += cert
                }
            }
        }

        bundle ? context.load_cadata(bundle, FILETYPE_ASN1)
    }

    load_windows_certs(DEFAULT_CONTEXT)
}

DEFAULT_CONTEXT.load_paths_default()

pub func connect(address, handshake=true) {
    /*
        Make a secure TCP connection to an address.

        - Parameter address: IP/URL.
        - KWParameters:
          - handshake: Perform handshake on connection established (default: true).
        - Returns: SSLSocket
    */

    var sock = socket.dial("tcp", address)

    sock = DEFAULT_CONTEXT.wrap(sock, false)

    handshake ? sock.handshake()

    return sock
}
