/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
 *
 * The sync module provides utilities and primitives for synchronization
 * and concurrency control in multi-threaded environments.
 *
 * This module offers a collection of tools designed to simplify concurrent
 * programming, manage asynchronous operations, and ensure thread-safe
 * execution of code. It includes functions for coordinating multiple
 * asynchronous tasks, as well as various synchronization primitives.
 */

pub let __version = "@PROJECT_VERSION@"

pub func oneshot(fn) {
    /*
        Create a thread-safe function that executes the given function only once and memoizes its result.

        This function takes a function `fn` as input and returns a new thread-safe function that will
        call `fn` only on its first invocation across all threads. Subsequent calls from any thread
        will return the memoized result.

        Behavior:
        1. The returned function is thread-safe. Multiple threads can call it concurrently without race conditions.
        2. `fn` is guaranteed to be called exactly once, even in a multi-threaded environment.
        3. If `fn` returns successfully, its result is memoized and returned on all subsequent calls from any thread.
        4. If `fn` results in a panic, this panic is memoized and will be triggered on all calls from any thread.

        - Parameter fn: The function to be wrapped.
        - Returns: A new thread-safe function that wraps `fn` with oneshot behavior.
    */

    w := () => {
        r := trap fn()

        fn = nil

        return r
    }

    executed := false
    result := nil
    valid := true

    return () => {
        sync w {
            if !executed {
                result = w()

                if !result {
                    result = result.err()
                    valid = false
                } else {
                    result = result.ok()
                }

                executed = true
            }
        }

        if !valid {
            panic(result)
        }

        return result
    }
}

pub func wait_all(futures) {
    /*
        Wait for all the given futures to complete.

        This function takes an iterable of futures and awaits each one in order.
        It blocks until all futures have completed, whether successfully or with an error.

        - Parameter futures: An iterable (e.g., list or tuple) of Future objects to be awaited.
        - Returns: The same iterable of futures passed as input, now all completed.
    */

    for var future of futures {
        await future
    }

    return futures
}

pub func wait_ok(futures) {
    /*
        Wait for all the given futures to complete successfully.

        This function iterates through an iterable of futures, awaiting each one
        and checking its result. If any future completes with an error, the function
        immediately panics with that error.

        - Parameter futures: An iterable (e.g., list or tuple) of Future objects to be awaited.
        - Returns: The same iterable of futures passed as input, all completed successfully.
        - Panics: If any future completes with an error, the function panics with that error.
    */

    for var future of futures {
        res := await future
        if !res {
            panic res.err()
        }
    }

    return futures
}
