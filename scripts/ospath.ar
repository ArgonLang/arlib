/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
*/

import "os"
import "runtime"

from "error" import ValueError

pub let __version = "@PROJECT_VERSION@"

pub func isabs(path) {
    /*
        Determines whether the given path is an absolute pathname.

        This function checks if the provided path represents an absolute pathname based on the current operating system.

        Example:
        is_absolute := isabs("/home/user/documents")
        # Result: true (on Unix-like systems)

        - Parameter path: The pathname to be checked.
        - Returns: True if the path is an absolute pathname, false otherwise.

        See Also:
        - abspath: For converting a relative path to an absolute path.
    */

    sep := os.pathsep

    if typeof(path, Bytes) {
        sep = Bytes(sep)
    }

    if runtime.os == "windows" {
        csep := ":\\"
        usep := "/"

        if typeof(path, Bytes) {
            csep = Bytes(csep)
            usep = Bytes(usep)
        }

        path = path[:3].replace(usep, sep)

        if path.startswith(sep * 2) || path[1:].startswith(csep) {
            return true
        }

        return false
    }

    return path.startswith(sep)
}

pub func abspath(path) {
    /*
        Returns a normalized absolute version of the pathname.

        This function converts a relative path to an absolute path and normalizes it.

        Example:
        abs_path := abspath("./documents/file.txt")
        # Result: "/home/user/documents/file.txt" (assuming current directory is /home/user)

        - Parameter path: The pathname to be normalized.
        - Returns: The normalized version of the pathname.

        See Also:
        - isabs: For checking if a path is already absolute.
        - normalize: For normalizing a path without making it absolute.
    */

    if !isabs(path) {
        if typeof(path, Bytes) {
            return os.getcwd()
                |> Bytes
                |> join(path)
                |> normalize
        }

        return os.getcwd()
            |> join(path)
            |> normalize
    }

    return normalize(path)
}

pub func basename(path) {
    /*
        Returns the base name of the pathname.

        This function extracts the final component of a pathname.

        Example:
        base := basename("/home/user/documents/file.txt")
        # Result: "file.txt"

        - Parameter path: The pathname.
        - Returns: The base name of the pathname.

        See Also:
        - dirname: For getting the directory part of a pathname.
    */

    return split(path)[1]
}

pub func dirname(path) {
    /*
        Returns the directory name of the pathname.

        This function extracts the directory part of a pathname.

        Example:
        dir := dirname("/home/user/documents/file.txt")
        # Result: "/home/user/documents"

        - Parameter path: The pathname.
        - Returns: The directory name of the pathname.

        See Also:
        - basename: For getting the final component of a pathname.
    */

    return split(path)[0]
}

pub func split(path) {
    /*
        Splits the pathname into a tuple (head, tail), where tail is the last pathname component.

        This function separates a pathname into its directory part and its final component.

        Example:
        head, tail := split("/home/user/documents/file.txt")
        # Result: head = "/home/user/documents", tail = "file.txt"

        - Parameter path: The pathname to be split.
        - Returns: A tuple representing head and tail of the specified pathname.

        See Also:
        - join: For combining path components.
    */

    sep := os.pathsep

    if typeof(path, Bytes) {
        sep = Bytes(sep)
    }

    idx := path.rfind(sep) + 1

    head, tail := path[:idx], path[idx:]
    if head && head != sep * len(head) {
        head = head.rtrim(chars=sep)
    }

    return head, tail
}

pub func join(base, ...comps) {
    /*
        Joins one or more path segments.

        This function combines multiple path components into a single pathname.

        Example:
        full_path := join("/home/user", "documents", "file.txt")
        # Result: "/home/user/documents/file.txt"

        - Parameters:
           - base: The base pathname.
           - ...comps: Other path components.
        - Returns: A string representing the concatenated path components.

        See Also:
        - split: For separating a pathname into components.
    */

    sep := os.pathsep

    if typeof(base, Bytes) {
        sep = Bytes(os.pathsep)
    }

    path := base

    if !comps {
        path[:0] + sep
    }

    for var comp of comps {
        if comp.startswith(sep) {
            path = comp
        } elif !path || path.endswith(sep) {
            path += comp
        } else {
            path += sep + comp
        }
    }

    return path
}

pub func normalize(path) {
    /*
        Normalizes a path by eliminating double slashes, etc.

        This function simplifies a pathname by removing redundant separators and resolving ".." and "." components.

        Example:
        norm_path := normalize("/home/user/../user/./documents//file.txt")
        # Result: "/home/user/documents/file.txt"

        - Parameter path: The pathname to be normalized.
        - Returns: The normalized version of the pathname.

        See Also:
        - abspath: For normalizing and making a path absolute.
    */

    sep := os.pathsep
    empty := ""
    dot := "."
    dotdot := ".."

    if typeof(path, Bytes) {
        sep = Bytes(sep)
        empty = b""
        dot = b"."
        dotdot = b".."
    }

    if !path {
        return dot
    }

    var slash

    _, slash, path = splitroot(path)
    components := path.split(sep)

    npath := []

    for var comp of components {
        if comp in (empty, dot) {
            continue
        }

        if comp != dotdot || (!slash && !npath) || (npath && npath[-1] == dotdot) {
            npath.append(comp)
        } elif npath {
            npath.pop()
        }
    }

    return slash + sep.join(npath)
}

pub func normcase(path) {
    /*
        Normalizes the case of the pathname.

        This function adjusts the case of a pathname based on the operating system conventions.

        Example:
        norm_case := normcase("C:/Users/Documents")
        # Result: "c:\users\documents" (on Windows)

        - Parameter path: The pathname to be normalized.
        - Returns: The normalized version of the pathname.

        See Also:
        - normalize: For general path normalization.
    */

    if runtime.os != "windows" {
        return path
    }

    sep := os.pathsep
    usep := "/"

    if typeof(path, Bytes) {
        sep = Bytes(sep)
        usep = Bytes(usep)
    }

    return path.replace(usep, sep).lower()
}

pub func splitroot(path) {
    /*
        Splits the pathname into a 3-item tuple (drive, root, tail).

        This function separates a pathname into its drive, root, and remaining components.

        Example:
        drive, root, tail := splitroot("C:\\Users\\documents\\file.txt")
        # Result: drive = "C:", root = "\\", tail = "Users\\documents\\file.txt" (on Windows)

        - Parameter path: The pathname to be split.
        - Returns: A tuple representing drive, root, and tail of the specified pathname.

        See Also:
        - split: For a simpler path splitting.
    */

    sep := os.pathsep
    altsep := "\\"
    empty := ""

    if runtime.os == "windows" {
        altsep = "/"
    }

    if typeof(path, Bytes) {
        sep = Bytes(sep)
        altsep = Bytes(altsep)
        empty = b""
    }

    path = path.replace(altsep, sep)

    if path[:1] != sep {
        # Relative path
        return empty, empty, path
    } elif path[1:2] != sep || path[2:3] == sep {
        # Absolute path
        return empty, sep, path[1:]
    }

    return empty, path[:2], path[2:]
}

pub func commonpath(...paths) {
	/*
        Given a sequence of paths, returns the longest common sub-path.

        This function finds the longest path that is a prefix of all the given paths.

        Example:
        common := commonpath("/home/user/docs", "/home/user/downloads", "/home/user/music")
        # Result: "/home/user"

        - Parameter ...paths: A list of pathnames.
        - Returns: A string representing the longest common sub-path in the specified list.
        - Panics: Raises ValueError if the input sequence is empty or if absolute and relative paths are mixed.

        See Also:
        - join: For combining path components.
    */

    if !paths {
        panic ValueError("commonpath() paths is an empty sequence")
    }

    sep := os.pathsep
    dot := "."
    if typeof(paths[0], Bytes) {
        sep = Bytes(sep)
        dot = b"."
    }

    # Check absolute and relative paths
    abs := isabs(paths[0])
    for var path of paths {
        if isabs(path) ^ abs {
            panic ValueError("can't mix absolute and relative paths")
        }
    }

    split_paths := []
    for var path of paths {
        split_paths.append(path.split(sep))
    }

    ss_paths := []
    for var path of split_paths {
        tmp := []

        for var c of path {
            if c && c != dot {
                tmp.append(c)
            }
        }

        ss_paths.append(tmp)
    }

    s_min := ss_paths.min()
    s_max := ss_paths.max()
    common := s_min
    
    for var i = 0; i < len(s_min); i += 1 {
        if s_min[i] != s_max[i] {
            common = s_min[:i]
            break
        }
    }

    return (abs ? sep : sep[:0]) + sep.join(common)
}
