/*
 * This source file is part of the Argon project.
 *
 * Licensed under the Apache License v2.0
 *
 * INI Parser
 * This module contains a parser for INI files,
 * supports sections nested through the separator '.' (it is however possible to select a different one)
 * and is able to transform an ini file into a map and vice versa.
 *
 * E.g.:
   property without section are allowed = yes
  
   [section 1]
   ; this is a comment
   # and this is a comment too
   key = value
   ; a colon can be used instead of the equal
   key1 : value
  
   [.nested 1]
   ; this section is nested to the previous one if support for nested sections is enabled
   key without value are allowed
  
   [section.inner1.inner2]
   # the "section" section is created, then the "inner1" section and the "inner2" section
   inner2 key = "Hello"
 *
 * are mapped to:
 *
   {
   	 "property without section are allowed": "yes",
   	 "section 1": {
   	 	 "key": "value",
   		 "key1": "value",
   		 "nested 1": {
   			 "key without value are allowed": null
   		 }
   	 },
   	 "section": {
   		 "inner1": {
   			 "inner2": {
   				 "inner2 key": ""Hello"
   			 }
   		 }
   	 }
   }
*/

import "io"
import "regex" as re

from "error" import TypeError

pub let __version = "@PROJECT_VERSION@"

let INI_COMMENTS = re.Pattern(r#"\s*[;|#].*"#)
let INI_SECTION = re.Pattern(r#"\s*\[(.+?)\]\s*$"#)
let INI_KONLY = re.Pattern(r#"\s*(.+)?\s*$"#)
let INI_KV = re.Pattern(r#"\s*(.+?)\s*[=|:]\s*(.+)*$"#)

let IniError = Error(@IniError)

struct Section {
    pub var name

    var nested
    var props

    pub func add_property(self, key, value) {
        key = key.tostr().trim().lower()

        if value {
            value = value.tostr().trim()
        }

        if self.props == nil {
            self.props = {key: value}
            return
        }

        var prop = self.props.get(key).unwrap_or(nil)
        if prop {
            if typeof(prop, List) {
                prop.append(value)
                return
            }

            self.props[key] = [prop, value]
            return
        }

        self.props[key] = value
    }

    pub func add_section(self, name) {
        if typeof(name, Bytes) {
            name = name.tostr()
        }

        if self.nested == nil {
            self.nested = {name: Section@(name)}
        } elif !self.nested.contains(name) {
            self.nested[name] = Section@(name)
        }

        return self.nested[name]
    }

    pub func get_option(self, name) {
        return self.props?.get(name).unwrap_or(nil)
    }

    pub func get_options(self) {
        return self.props?.items()
    }

    pub func get_section(self, section) {
        return self.nested?.get(section).unwrap_or(nil)
    }

    pub func to_dict(self) {
        var ret = {}

        if self.props {
            ret = Dict(self.props)
        }

        if self.nested {
            for var key, value of self.nested {
                ret[key] = value.to_dict()
            }
        }

        return ret
    }

    pub func write(self, section) {
        var lines = []
        var key, value

        if section {
            lines.append(b"\n[%s]" % section)
        }

        if self.props {
            for key, value of self.props {
                if !value {
                    lines.append(b"%s" % key)
                    continue
                }

                lines.append(b"%s = %s" % (key, value))
            }
        }

        if self.nested {
            for key, value of self.nested {
                if !section {
                    lines.append(value.write(key))
                    continue
                }

                lines.append(value.write("%s.%s" % (section, key)))
            }
        }

        return b"\n".join(lines)
    }
}

pub struct IniParser {
    /*
        Represents a parser for INI files.

        This struct provides methods to read, parse, and manipulate INI-formatted data.
        It supports nested sections (which can be disabled), empty keys, and custom section separators.

        Example:
        ini_parser := IniParser@()
        ini_parser.read(file_content)
    */

    var no_nested_section = false
    var no_empty_key = false
    var section_separator = "."

    var line    # Index of processed line
    var main    # Main section
    var s_cur   # Current section

    pub func get(self, section, option, fallback) {
        /*
            Retrieves the value of a specific option within a section.

            Example:
            value := ini_parser.get("section1", "option1", "default_value")

            - Parameters:
               - section: The name of the section.
               - option: The name of the option.
               - fallback: The value to return if the option is not found.
            - Returns: The value of the option if found, otherwise the fallback value.

            See Also:
            - get_section: For retrieving an entire section.
            - has_option: For checking if an option exists.
        */
        return (self.get_section(section)?.get_option(option)) ?: fallback
    }

    pub func get_section(self, name) {
        /*
            Retrieves a specific section from the INI structure.

            Example:
            section := ini_parser.get_section("section1.subsection")

            - Parameter name: The name of the section (can be nested if nested sections are enabled).
            - Returns: The Section object if found, otherwise nil.

            See Also:
            - get: For retrieving a specific option within a section.
            - has_section: For checking if a section exists.
        */

        if !self.no_nested_section {
            var subs = name.split(self.section_separator)
            var section = self.main

            if section == nil {
                return nil
            }

            for var sub of subs {
                section = section.get_section(sub)
                if section == nil {
                    break
                }
            }

            return section
        }

        return self.main?.get_section(name)
    }

    pub func get_options(self, section) {
        /*
             Retrieves all options within a specific section.

             Example:
             options := ini_parser.get_options("section1")

             - Parameter section: The name of the section.
             - Returns: An iterable of key-value pairs representing the options in the section, or nil if the section doesn't exist.

             See Also:
             - get: For retrieving a specific option.
         */

        return self.get_section(section)?.get_options()
    }

    pub func has_option(self, section, name) {
        /*
            Checks if a specific option exists within a section.

            Example:
            exists := ini_parser.has_option("section1", "option1")

            - Parameters:
               - section: The name of the section.
               - name: The name of the option.
            - Returns: True if the option exists, false otherwise.

            See Also:
            - get: For retrieving the value of an option.
            - has_section: For checking if a section exists.
        */

        return self.get_section(section)?.get_option(name) != nil
    }

    pub func has_section(self, name) {
        /*
            Checks if a specific section exists in the INI structure.

            Example:
            exists := ini_parser.has_section("section1.subsection")

            - Parameter name: The name of the section (can be nested if nested sections are enabled).
            - Returns: True if the section exists, false otherwise.

            See Also:
            - get_section: For retrieving a section.
            - has_option: For checking if an option exists within a section.
        */

        return self.get_section(name) != nil
    }

    func parse(self, line) {
        if !line || INI_COMMENTS.find(line) {
            return
        }

        if self.main == nil {
            self.main = Section@()
            self.s_cur = self.main
        }

        var match = INI_SECTION.find(line)
        if match {
            self.parse_section(match[1])
            return
        }

        match = INI_KV.find(line)
        if !match || len(match) < 2 {
            match = INI_KONLY.find(line)
            if !match {
                panic IniError("%d invalid line" % self.line)
            }

            if self.no_empty_key {
                panic IniError("line %d: key '%s' is without value, in this mode it is not supported" % (self.line, match[0].tostr()))
            }

            self.s_cur.add_property(match[1], nil)
            return
        }

        self.s_cur.add_property(match[1], match[2])
    }

    func parse_section(self, section) {
        if !self.no_nested_section {
            var subs = section.split(self.section_separator)
            var first = true

            for var cursor of subs {
                if !cursor {
                    first = false
                    continue
                }

                self.s_cur = first ? self.main.add_section(cursor) : self.s_cur.add_section(cursor)
                first = false
            }

            return
        }

        self.s_cur = self.main.add_section(section)
    }

    pub func read(self, data) {
        /*
            Reads and parses INI-formatted data.

            This method can handle data from various sources including strings, bytes, and file-like objects.

            Example:
            ini_parser := IniParser@()
            ini_parser.read(file_content)

            - Parameter data: The INI-formatted data to parse (can be a string, bytes, or file-like object).
            - Panics: Raises TypeError if the input type is not supported.

            See Also:
            - write: For converting the parsed data back to INI format.
        */

        if implements(data, io.LineReader) {
            return self.read_file(data)
        }

        if typeof(data, String) {
            # Convert to bytes for easier manipulation
            data = Bytes(data)
        }

        if typeof(data, Bytes) {
            var lgen = () => {
                var index = data.find("\n")

                if index < 0 {
                    yield data
                    return
                }

                loop index >= 0 {
                    yield data[:index]

                    data = data[index + 1:]
                    index = data.find("\n")
                }
            }

            self.line = 0

            for var line of lgen() {
                self.line += 1
                self.parse(line)
            }

            return
        }

        panic TypeError("can't understand %s" % type(data))
    }

    func read_file(self, file) {
        self.line = 0

        var line = file.readline(-1)
        loop line {
            self.line += 1

            self.parse(line[:-1])

            line = file.readline(-1)
        }
    }

    pub func to_dict(self) {
        /*
            Converts the parsed INI structure to a dictionary.

            Example:
            dict_representation := ini_parser.to_dict()

            - Returns: A dictionary representation of the INI structure.

            See Also:
            - write: For converting the parsed data to INI format.
        */

        if self.main == nil {
            return {}
        }

        if self.main.name == nil {
            return self.main.to_dict()
        }

        var ret = {}
        ret[self.main.name] = self.main.to_dict()
        return ret
    }

    pub func write(self) {
        /*
            Converts the parsed INI structure back to INI format.

            Example:
            ini_content := ini_parser.write()

            - Returns: A bytes object containing the INI-formatted data.

            See Also:
            - to_dict: For converting the parsed data to a dictionary.
            - read: For parsing INI-formatted data.
        */

        return self.main.write(nil)
    }
}

if __name == "__main" {
    var test_input = r#"
    property without section are allowed = yes

    [section 1]
    ; this is a comment
    # and this is a comment too
    key = value
    ; a colon can be used instead of the equal
    key1 : value

    [.nested 1]
    ; this section is nested to the previous one if support for nested sections is enabled
    key without value are allowed

    [section.inner1.inner2]
    # the "section" section is created, then the "inner1" section and the "inner2" section
    inner2 key = "Hello"
    "#

    var ini = IniParser@()
    ini.read(test_input)

    io.print("Test: ")

    io.print("Write INI dump:\n\n", ini.write().tostr())

    io.print("\n\nWrite INI to dict:\n\n", ini.to_dict())

    io.print("\n\nRun checks...")

    assert ini.has_section("section 1")
    assert ini.has_section("section")
    assert ini.has_section("section.inner1.inner2")

    assert ini.has_option("section 1", "key")
    assert ini.has_option("section 1", "key2") == false
    assert ini.has_option("section.inner1.inner2", "inner2 key")

    assert ini.get("section.inner1.inner2", "inner2 key", nil) == "\"Hello\""

    assert ini.get("", "property without section are allowed", nil) == "yes"

    assert ini.get("", "fallback", 2406) == 2406

    io.print("Done")
}
